#!/usr/bin/env node

var fs = require('fs'); // need file reading capability
var childProcess = require('child_process'); // for running cmd line
var PrepareCommitMessage = require('../../KBB.Trident.Web/node_modules/kbb-local-hooks/prepare-commit-msg.js');

console.log('PREPARE COMMIT MSG HOOK');

var mergeFile = process.argv[2]; // merge commit message is stored in a file, usually ".git/MERGE_MSG"
var source = process.argv[3]; // commit message source (message, template, merge, squash, commit)
var statusCode = 1;
var mergeFromBranchName = '';
var currentBranchName = '';

// if merge, then get the current branch name and the merge from branch name
if(source === 'merge'){
	// get the merge from branch name
	try {
		var stats = fs.statSync(mergeFile);
		var mergeFrom = fs.readFileSync(mergeFile, { encoding: 'utf8' }); // read the file for the merge info

		// parse out the merge from branch name
		// merge from branch name is stored in the merge file in this convention "Merge branch '[branchName]'"
		mergeFromBranchName = merge.substring(merge.indexOf('\'') + 1, merge.lastIndexOf('\''));
		console.log('mergeFromBranchName: ' + mergeFromBranchName);	
	}
	catch (e) {
		console.log('ERROR: merge file not found');
	}
	
	// get the current branch name
	var spawn = childProcess.spawnSync('git', ['rev-parse', '--abbrev-ref', 'HEAD']);
	var errorText = spawn.stderr.toString().trim();
	if (errorText) {
		console.log('ERROR: Failed to get branch name');
	}
	else {
		currentBranchName = spawn.stdout.toString().trim();
		console.log('currentBranchName: ' + currentBranchName;
	}
	
	if(mergeFromBranchName !== '' && currentBranchName !== '') {
		statusCode = PrepareCommitMessage.validate(currentBranchName, mergeFromBranchName);
	}
}
console.log('source: ' + source);


process.exit(statusCode);