#!/usr/bin/env node

var fs = require('fs'); // need file reading capability
var childProcess = require('child_process'); // for running cmd line
var PrepareCommitMessage = require('../../KBB.Trident.Web/node_modules/kbb-local-hooks/prepare-commit-msg.js');

console.log('PREPARE COMMIT MSG HOOK');

var mergeFile = process.argv[2]; // merge commit message is stored in a file, usually ".git/MERGE_MSG"
var source = process.argv[3]; // commit message source (message, template, merge, squash, commit)

var mergeCommitMessage;
if(source === 'merge'){
	try {
		var stats = fs.statSync(mergeFile);
		var merge = fs.readFileSync(mergeFile, { encoding: 'utf8' }); // read the file for the merge info

		// parse out the merge from branch name
		// merge from branch name is stored in the merge file in this convention "Merge branch '[branchName]'"
		var mergeFromBranchName = merge.substring(merge.indexOf('\'') + 1, merge.lastIndexOf('\''));
		console.log(mergeFromBranchName);

		// branch name will be in this convention "story-XXXXX-description" or "bug-XXXXX-description"
		// get the first part of the branch name to determine type of commit (story or bug)
		var commitType = mergeFromBranchName.substring(0, mergeFromBranchName.indexOf('-'));
		mergeFromBranchName = mergeFromBranchName.substring(mergeFromBranchName.indexOf('-') + 1);

		// get the id of the story or bug, this is in the second part of the branch name
		var id = mergeFromBranchName.substring(0, mergeFromBranchName.indexOf('-'));
		mergeFromBranchName = mergeFromBranchName.substring(mergeFromBranchName.indexOf('-') + 1);

		// with all the parts cut out from the branch name, the remaining that is left is the branch description
		var branchDescription = mergeFromBranchName;

		// update the merge message with an invalid template, so the user has to go and fill in the correct message
		mergeCommitMessage = 'x';
		if(commitType === 'story') {
			mergeCommitMessage += 'Story: B-';
		}
		else {
			mergeCommitMessage += 'BugId: ';
		}
		mergeCommitMessage += id + ' | [WhatDidYouMerge?]'

		console.log(mergeCommitMessage);
		console.log(mergeFile);

		try {
			fs.unlinkSync(mergeFile);
			fs.unlinkSync(mergeFile + '1');
		}
		catch (e) {
			console.log('could not delete file');
		}

		
		try {
			//fs.writeFileSync(mergeFile, mergeCommitMessage);
			//fs.writeFileSync(mergeFile + '1', mergeCommitMessage);
		}
		catch (e) {
			console.log('could not update file');
		}
		
	}
	catch (e) {
		console.log('merge file not found, no merge in progress');
	}
}

console.log('source: ' + source);


process.exit(1);